Reactor
  1.Handle(句柄或是描述符) 本质上是表示一种资源，由操作系统提供；该资源用于表示一个个的事件，比如说文件描述符，或是针对网络编程中的Scoket描述符。
事件既可以来自于外部，也可以来自于内部；外部事件比如说客户端的连接请求，客户端发送过来数据等；内部时间比如说操作系统产生的定时器事件等。本质上就是
一个文件描述符。Handle是事件产生的发源地。
  2.Synchronous Event Demultiplexer （同步事件分离器）：是一个系统调用，用于等待时间的发生（事件可能是一个，也可能是多个）。调用方再调用它的时候
会被阻塞，一直阻塞到同步事件分离器上有使劲按产生为止。对于Linux来说，同步事件分离器指的就是常用的I/O多路复用，比如说 select，poll，epoll等。
在java Nio中，同步事件分离器就是Selector；对应的阻塞方法就是select（）；
  3.Event Handler（事件处理器）：由多个回调方法构成，这些回调方法构成了与应用相关的对于某个事件的反馈机制。Nett相对于Java Nio来说，在事件处理器这个
角色上进行了一个升级，它未我们开发者提供了大量的回调方法，供我们在特定事件产生时实现响应的回调方法进行业务逻辑的处理。
  4.Concrete Event Handler（具体事件处理器）：事件处理器的具体实现。本身实现了事件处理器提供的各个回调方法，从而事件了特定业务的逻辑。本质上就是
我们自己编写的处理器实现。
  5.Initiation  Dispatcher（初始分发器）：实际就是Reactor。定义了一些规范，用于控制事件的调度方式，同时又提供了应用进行事件处理器的注册，删除等。是整个
事件处理器的核心。Initiation Dispatcher  会通过同步事件分离器来等待事件的发生，一旦事件发生，首先会分离出各个事件，然后就会根据规范调用相应的事件处理器
处理这些事件。